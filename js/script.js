// TODO: Check syntax by seeing if default params are supported
//https://www.keycdn.com/blog/browser-compatibility-testing-tools/
"use strict";

function log(msg) {
// text = text.toString()
// text = text.replace(/(?:\r\n|\r|\n)/g, '<br>');
if (msg == null) {
    msg = '[null]'
}
document.getElementById("log").innerHTML += msg + "<br>"
}

function logt(tag, msg) {
    if (msg == null) {
        msg = '[null]'
    }
    // text = text.toString()
    // text = text.replace(/(?:\r\n|\r|\n)/g, '<br>');
    log(tag + ": " + msg.toString())
}

var sum = Math.acos(0.5) +
    Math.acosh(1) +
    Math.asin(0.5) +
    Math.asinh(1) +
    Math.atan(1) +
    Math.atanh(0.5) +
    Math.cbrt(2) +
    Math.cos(1) +
    Math.cosh(1) +
    Math.exp(1.5) +
    Math.log(10) +
    Math.log10(994382.23) +
    Math.pow(1.2345, 6.7890) +
    Math.sin(1) +
    Math.sinh(1) +
    Math.tan(1) +
    Math.E +
    Math.PI +
    Math.SQRT2 +
    Math.SQRT1_2 +
    Math.LN2 +
    Math.LN10 +
    Math.LOG2E +
    Math.LOG10E +
    Math.tanh(1);

log(sum);
log("navigator.deviceMemory: " + navigator.deviceMemory);
log("navigator.platform: " + navigator.platform);

log(document)

function objectToString(object) {
    return _objectToString(object, 0);
}

function _objectToString(object, depth) {
    if (object == null) {
        return 'null';
    }

    if (['string', 'boolean', 'number', 'symbol'].indexOf(typeof object) != -1) {
        return object.toString();
    }

    if (typeof object == 'function') {
        return 'function: ' + object.name;
    }

    var spaces = '  ';
    var ret = '';
    var padding = spaces.repeat(depth);
    if (Array.isArray(object)) {
        ret += padding + "[\n";
        for (var i = 0; i < object.length; ++i) {
            ret += padding + spaces + _objectToString(object[i], depth + 1) + ",\n";
        }
        ret += padding + "]\n";
        return ret;
    }

    ret += "{\n"
    if (object.__proto__ != null) {
        ret += padding + spaces + '"__proto__": ' + _objectToString(object.__proto__, depth + 1);
    }

    for (var property in object) {
        if (object.hasOwnProperty(property)) {
            if (property == 'TEXT_NODE') {
                ret += object.toString();
            }
            // ret += padding + spaces + property + ': ' + objectToString(object.__proto__, depth + 1);
        }
    }
    ret += padding + "}\n"
    return ret;
}

function domObjectToString(dom) {
    return _domObjectToString(dom, 0);
}

function _domObjectToString(dom, depth) {
    var spaces = '  ';
    var padding = spaces.repeat(depth);

    var children = dom.childNodes;
    if (typeof children == 'undefined') {
        return dom.toString();
    }

    var ret = padding + dom.toString() + ': {\n';
    for (var i = 0; i < children.length; ++i) {
        ret += padding + spaces + _domObjectToString(children[i], depth + 1);
    }
    ret += padding + "}\n";
    return ret;
}


var knownProperties = [
    'activeElement',
    'adoptNode',
    'alinkColor',
    'all',
    'anchors',
    'applets',
    'async',
    'author',
    'baseURI',
    'bgColor',
    'body',
    'captureEvents',
    'caretRangeFromPoint',
    'characterSet',
    'charset',
    'childElementCount',
    'childNodes',
    'children',
    'compatMode',
    'contentType',
    'cookie',
    'createAttribute',
    'createAttributeNS',
    'createCDATASection',
    'createComment',
    'createDocumentFragment',
    'createElement',
    'createElementNS',
    'createEntityReference',
    'createEvent',
    'createNodeIterator',
    'createProcessingInstruction',
    'createRange',
    'createTextNode',
    'createTouch',
    'createTouchList',
    'createTreeWalker',
    'currentScript',
    'defaultView',
    'description',
    'designMode',
    'dir',
    'doctype',
    'document',
    'documentElement',
    'documentURI',
    'domain',
    'domConfig',
    'embeds',
    'enableStyleSheetsForSet',
    'exitPointerLock',
    'fgColor',
    'firstChild',
    'firstElementChild',
    'fonts',
    'forms',
    'fullscreen',
    'fullscreenElement',
    'getAnimations',
    'getElementsByClassName',
    'getElementsByTagName',
    'getElementsByTagNameNS',
    'head',
    'height',
    'hidden',
    'images',
    'implementation',
    'importNode',
    'inputEncoding',
    'isConnected',
    'lastChild',
    'lastElementChild',
    'lastModified',
    'lastStyleSheetSet',
    'length',
    'linkColor',
    'links',
    'location',
    'log',
    'mozFullScreenElement',
    'mozFullScreenEnabled',
    'mozSetImageElement',
    'mozSyntheticDocument',
    'nextSibling',
    'nodeName',
    'nodeType',
    'nodeValue',
    'normalizeDocument',
    'origin',
    'ownerDocument',
    'parentElement',
    'parentNode',
    'plugins',
    'pointerLockElement',
    'preferredStyleSheetSet',
    'preferredStylesheetSet',
    'previousSibling',
    'readyState',
    'referrer',
    'releaseCapture',
    'releaseEvents',
    'rootElement',
    'routeEvent',
    'scripts',
    'scrollingElement',
    'selectedStyleSheetSet',
    'selectedStylesheetSet',
    'styleSheets',
    'styleSheetSets',
    'textContent',
    'timeline',
    'title',
    'undoManager',
    'URL',
    'visibilityState',
    'vlinkColor',
    'wasDiscarded',
    'webkitCurrentFullScreenElement',
    'webkitFullscreenElement',
    'webkitFullscreenEnabled',
    'webkitFullScreenKeyboardInputAllowed',
    'webkitHidden',
    'webkitIsFullScreen',
    'webkitVisibilityState',
    'width',
    'xmlEncoding',
    'xmlStandalone',
    'xmlVersion',
]

var checkExistenceOnly = [
    'onabort',
    'onafterscriptexecute',
    'onanimationcancel',
    'onanimationend',
    'onanimationiteration',
    'onanimationstart',
    'onauxclick',
    'onbeforecopy',
    'onbeforecut',
    'onbeforeinput',
    'onbeforepaste',
    'onbeforescriptexecute',
    'onblur',
    'oncancel',
    'oncanplay',
    'oncanplaythrough',
    'onchange',
    'onclick',
    'onclose',
    'oncontextmenu',
    'oncopy',
    'oncuechange',
    'oncut',
    'ondblclick',
    'ondrag',
    'ondragend',
    'ondragenter',
    'ondragexit',
    'ondragleave',
    'ondragover',
    'ondragstart',
    'ondrop',
    'ondurationchange',
    'onemptied',
    'onended',
    'onerror',
    'onfocus',
    'onfreeze',
    'onfullscreenchange',
    'onfullscreenerror',
    'ongotpointercapture',
    'oninput',
    'oninvalid',
    'onkeydown',
    'onkeypress',
    'onkeyup',
    'onload',
    'onloadeddata',
    'onloadedmetadata',
    'onloadend',
    'onloadstart',
    'onlostpointercapture',
    'onmousedown',
    'onmouseenter',
    'onmouseleave',
    'onmousemove',
    'onmouseout',
    'onmouseover',
    'onmouseup',
    'onmousewheel',
    'onpaste',
    'onpause',
    'onplay',
    'onplaying',
    'onpointercancel',
    'onpointerdown',
    'onpointerenter',
    'onpointerleave',
    'onpointerlockchange',
    'onpointerlockerror',
    'onpointermove',
    'onpointerout',
    'onpointerover',
    'onpointerup',
    'onprogress',
    'onratechange',
    'onreadystatechange',
    'onrejectionhandled',
    'onreset',
    'onresize',
    'onresume',
    'onscroll',
    'onsearch',
    'onseeked',
    'onseeking',
    'onselect',
    'onselectionchange',
    'onselectstart',
    'onshow',
    'onsort',
    'onstalled',
    'onsubmit',
    'onsuspend',
    'ontimeupdate',
    'ontoggle',
    'ontouchcancel',
    'ontouchend',
    'ontouchmove',
    'ontouchstart',
    'ontransitioncancel',
    'ontransitionend',
    'onunhandledrejection',
    'onvisibilitychange',
    'onvolumechange',
    'onwaiting',
    'onwebkitfullscreenchange',
    'onwebkitfullscreenerror',
    'onwebkitmouseforcechanged',
    'onwebkitmouseforcedown',
    'onwebkitmouseforceup',
    'onwebkitmouseforcewillbegin',
    'onwheel',
    'location',
    'URL',
]

var knownWindowProperties = [
    'AbortController',
    'AbortSignal',
    'AbsoluteOrientationSensor',
    'Accelerometer',
    'alert',
    'AnalyserNode',
    'AnimationEvent',
    'applicationCache',
    'ApplicationCache',
    'ApplicationCacheErrorEvent',
    'arguments',
    'Array',
    'ArrayBuffer',
    'atob',
    'Atomics',
    'Attr',
    'Audio',
    'AudioBuffer',
    'AudioBufferSourceNode',
    'AudioContext',
    'AudioDestinationNode',
    'AudioListener',
    'AudioNode',
    'AudioParam',
    'AudioParamMap',
    'AudioProcessingEvent',
    'AudioScheduledSourceNode',
    'AudioWorklet',
    'AudioWorkletNode',
    'AuthenticatorAssertionResponse',
    'AuthenticatorAttestationResponse',
    'AuthenticatorResponse',
    'BarProp',
    'BaseAudioContext',
    'BatteryManager',
    'BeforeInstallPromptEvent',
    'BeforeUnloadEvent',
    'BigInt',
    'BigInt64Array',
    'BigUint64Array',
    'BiquadFilterNode',
    'Blob',
    'BlobEvent',
    'Bluetooth',
    'BluetoothCharacteristicProperties',
    'BluetoothDevice',
    'BluetoothRemoteGATTCharacteristic',
    'BluetoothRemoteGATTDescriptor',
    'BluetoothRemoteGATTServer',
    'BluetoothRemoteGATTService',
    'BluetoothUUID',
    'blur',
    'Boolean',
    'BroadcastChannel',
    'btoa',
    'BudgetService',
    'ByteLengthQueuingStrategy',
    'Cache',
    'caches',
    'CacheStorage',
    'caller',
    'cancelAnimationFrame',
    'cancelIdleCallback',
    'CanvasCaptureMediaStreamTrack',
    'CanvasGradient',
    'CanvasPattern',
    'CanvasRenderingContext2D',
    'captureEvents',
    'CDATASection',
    'ChannelMergerNode',
    'ChannelSplitterNode',
    'CharacterData',
    'chrome',
    'clearInterval',
    'clearTimeout',
    'clientInformation',
    'Clipboard',
    'ClipboardEvent',
    'close',
    'closed',
    'CloseEvent',
    'Comment',
    'CompositionEvent',
    'confirm',
    'console',
    'ConstantSourceNode',
    'constructor',
    'ConvolverNode',
    'CountQueuingStrategy',
    'createImageBitmap',
    'Credential',
    'CredentialsContainer',
    'crypto',
    'Crypto',
    'CryptoKey',
    'CSS',
    'CSSConditionRule',
    'CSSFontFaceRule',
    'CSSGroupingRule',
    'CSSImageValue',
    'CSSImportRule',
    'CSSKeyframeRule',
    'CSSKeyframesRule',
    'CSSKeywordValue',
    'CSSMathInvert',
    'CSSMathMax',
    'CSSMathMin',
    'CSSMathNegate',
    'CSSMathProduct',
    'CSSMathSum',
    'CSSMathValue',
    'CSSMatrixComponent',
    'CSSMediaRule',
    'CSSNamespaceRule',
    'CSSNumericArray',
    'CSSNumericValue',
    'CSSPageRule',
    'CSSPerspective',
    'CSSPositionValue',
    'CSSRotate',
    'CSSRule',
    'CSSRuleList',
    'CSSScale',
    'CSSSkew',
    'CSSSkewX',
    'CSSSkewY',
    'CSSStyleDeclaration',
    'CSSStyleRule',
    'CSSStyleSheet',
    'CSSStyleValue',
    'CSSSupportsRule',
    'CSSTransformComponent',
    'CSSTransformValue',
    'CSSTranslate',
    'CSSUnitValue',
    'CSSUnparsedValue',
    'CSSVariableReferenceValue',
    'CustomElementRegistry',
    'customElements',
    'CustomEvent',
    'DataTransfer',
    'DataTransferItem',
    'DataTransferItemList',
    'DataView',
    'Date',
    'decodeURI',
    'decodeURIComponent',
    'defaultStatus',
    'defaultstatus',
    'DelayNode',
    'DeviceMotionEvent',
    'DeviceOrientationEvent',
    'devicePixelRatio',
    'document',
    'Document',
    'DocumentFragment',
    'DocumentType',
    'DOMError',
    'DOMException',
    'DOMImplementation',
    'DOMMatrix',
    'DOMMatrixReadOnly',
    'DOMParser',
    'DOMPoint',
    'DOMPointReadOnly',
    'DOMQuad',
    'DOMRect',
    'DOMRectList',
    'DOMRectReadOnly',
    'DOMStringList',
    'DOMStringMap',
    'DOMTokenList',
    'DragEvent',
    'DynamicsCompressorNode',
    'Element',
    'encodeURI',
    'encodeURIComponent',
    'Error',
    'ErrorEvent',
    'escape',
    'eval',
    'EvalError',
    'Event',
    'event',
    'EventSource',
    'EventTarget',
    'external',
    'FederatedCredential',
    'fetch',
    'File',
    'FileList',
    'FileReader',
    'find',
    'Float32Array',
    'Float64Array',
    'focus',
    'FocusEvent',
    'FontFace',
    'FontFaceSetLoadEvent',
    'FormData',
    'frameElement',
    'frames',
    'Function',
    'GainNode',
    'Gamepad',
    'GamepadButton',
    'GamepadEvent',
    'GamepadHapticActuator',
    'getComputedStyle',
    'getSelection',
    'Gyroscope',
    'HashChangeEvent',
    'Headers',
    'history',
    'History',
    'HTMLAllCollection',
    'HTMLAnchorElement',
    'HTMLAreaElement',
    'HTMLAudioElement',
    'HTMLBaseElement',
    'HTMLBodyElement',
    'HTMLBRElement',
    'HTMLButtonElement',
    'HTMLCanvasElement',
    'HTMLCollection',
    'HTMLContentElement',
    'HTMLDataElement',
    'HTMLDataListElement',
    'HTMLDetailsElement',
    'HTMLDialogElement',
    'HTMLDirectoryElement',
    'HTMLDivElement',
    'HTMLDListElement',
    'HTMLDocument',
    'HTMLElement',
    'HTMLEmbedElement',
    'HTMLFieldSetElement',
    'HTMLFontElement',
    'HTMLFormControlsCollection',
    'HTMLFormElement',
    'HTMLFrameElement',
    'HTMLFrameSetElement',
    'HTMLHeadElement',
    'HTMLHeadingElement',
    'HTMLHRElement',
    'HTMLHtmlElement',
    'HTMLIFrameElement',
    'HTMLImageElement',
    'HTMLInputElement',
    'HTMLLabelElement',
    'HTMLLegendElement',
    'HTMLLIElement',
    'HTMLLinkElement',
    'HTMLMapElement',
    'HTMLMarqueeElement',
    'HTMLMediaElement',
    'HTMLMenuElement',
    'HTMLMetaElement',
    'HTMLMeterElement',
    'HTMLModElement',
    'HTMLObjectElement',
    'HTMLOListElement',
    'HTMLOptGroupElement',
    'HTMLOptionElement',
    'HTMLOptionsCollection',
    'HTMLOutputElement',
    'HTMLParagraphElement',
    'HTMLParamElement',
    'HTMLPictureElement',
    'HTMLPreElement',
    'HTMLProgressElement',
    'HTMLQuoteElement',
    'HTMLScriptElement',
    'HTMLSelectElement',
    'HTMLShadowElement',
    'HTMLSlotElement',
    'HTMLSourceElement',
    'HTMLSpanElement',
    'HTMLStyleElement',
    'HTMLTableCaptionElement',
    'HTMLTableCellElement',
    'HTMLTableColElement',
    'HTMLTableElement',
    'HTMLTableRowElement',
    'HTMLTableSectionElement',
    'HTMLTemplateElement',
    'HTMLTextAreaElement',
    'HTMLTimeElement',
    'HTMLTitleElement',
    'HTMLTrackElement',
    'HTMLUListElement',
    'HTMLUnknownElement',
    'HTMLVideoElement',
    'IDBCursor',
    'IDBCursorWithValue',
    'IDBDatabase',
    'IDBFactory',
    'IDBIndex',
    'IDBKeyRange',
    'IDBObjectStore',
    'IDBOpenDBRequest',
    'IDBRequest',
    'IDBTransaction',
    'IDBVersionChangeEvent',
    'IdleDeadline',
    'IIRFilterNode',
    'Image',
    'ImageBitmap',
    'ImageBitmapRenderingContext',
    'ImageCapture',
    'ImageData',
    'indexedDB',
    'Infinity',
    'innerHeight',
    'innerWidth',
    'InputDeviceCapabilities',
    'InputDeviceInfo',
    'InputEvent',
    'Int16Array',
    'Int32Array',
    'Int8Array',
    'IntersectionObserver',
    'IntersectionObserverEntry',
    'Intl',
    'isFinite',
    'isNaN',
    'isSecureContext',
    'JSON',
    'Keyboard',
    'KeyboardEvent',
    'length',
    'length',
    'LinearAccelerationSensor',
    'localStorage',
    'location',
    'Location',
    'locationbar',
    'Map',
    'matchMedia',
    'Math',
    'MediaCapabilities',
    'MediaCapabilitiesInfo',
    'MediaDeviceInfo',
    'MediaDevices',
    'MediaElementAudioSourceNode',
    'MediaEncryptedEvent',
    'MediaError',
    'MediaKeyMessageEvent',
    'MediaKeys',
    'MediaKeySession',
    'MediaKeyStatusMap',
    'MediaKeySystemAccess',
    'MediaList',
    'MediaQueryList',
    'MediaQueryListEvent',
    'MediaRecorder',
    'MediaSettingsRange',
    'MediaSource',
    'MediaStream',
    'MediaStreamAudioDestinationNode',
    'MediaStreamAudioSourceNode',
    'MediaStreamEvent',
    'MediaStreamTrack',
    'MediaStreamTrackEvent',
    'menubar',
    'MessageChannel',
    'MessageEvent',
    'MessagePort',
    'MIDIAccess',
    'MIDIConnectionEvent',
    'MIDIInput',
    'MIDIInputMap',
    'MIDIMessageEvent',
    'MIDIOutput',
    'MIDIOutputMap',
    'MIDIPort',
    'MimeType',
    'MimeTypeArray',
    'MouseEvent',
    'moveBy',
    'moveTo',
    'MutationEvent',
    'MutationObserver',
    'MutationRecord',
    'name',
    'name',
    'NamedNodeMap',
    'NaN',
    'NavigationPreloadManager',
    'navigator',
    'Navigator',
    'NetworkInformation',
    'Node',
    'NodeFilter',
    'NodeIterator',
    'NodeList',
    'Notification',
    'Number',
    'Object',
    'OfflineAudioCompletionEvent',
    'OfflineAudioContext',
    'offscreenBuffering',
    'onabort',
    'onafterprint',
    'onanimationend',
    'onanimationiteration',
    'onanimationstart',
    'onappinstalled',
    'onauxclick',
    'onbeforeinstallprompt',
    'onbeforeprint',
    'onbeforeunload',
    'onblur',
    'oncancel',
    'oncanplay',
    'oncanplaythrough',
    'onchange',
    'onclick',
    'onclose',
    'oncontextmenu',
    'oncuechange',
    'ondblclick',
    'ondevicemotion',
    'ondeviceorientation',
    'ondeviceorientationabsolute',
    'ondrag',
    'ondragend',
    'ondragenter',
    'ondragleave',
    'ondragover',
    'ondragstart',
    'ondrop',
    'ondurationchange',
    'onemptied',
    'onended',
    'onerror',
    'onfocus',
    'ongotpointercapture',
    'onhashchange',
    'oninput',
    'oninvalid',
    'onkeydown',
    'onkeypress',
    'onkeyup',
    'onlanguagechange',
    'onload',
    'onloadeddata',
    'onloadedmetadata',
    'onloadstart',
    'onlostpointercapture',
    'onmessage',
    'onmessageerror',
    'onmousedown',
    'onmouseenter',
    'onmouseleave',
    'onmousemove',
    'onmouseout',
    'onmouseover',
    'onmouseup',
    'onmousewheel',
    'onoffline',
    'ononline',
    'onpagehide',
    'onpageshow',
    'onpause',
    'onplay',
    'onplaying',
    'onpointercancel',
    'onpointerdown',
    'onpointerenter',
    'onpointerleave',
    'onpointermove',
    'onpointerout',
    'onpointerover',
    'onpointerup',
    'onpopstate',
    'onprogress',
    'onratechange',
    'onrejectionhandled',
    'onreset',
    'onresize',
    'onscroll',
    'onsearch',
    'onseeked',
    'onseeking',
    'onselect',
    'onstalled',
    'onstorage',
    'onsubmit',
    'onsuspend',
    'ontimeupdate',
    'ontoggle',
    'ontransitionend',
    'onunhandledrejection',
    'onunload',
    'onvolumechange',
    'onwaiting',
    'onwebkitanimationend',
    'onwebkitanimationiteration',
    'onwebkitanimationstart',
    'onwebkittransitionend',
    'onwheel',
    'open',
    'openDatabase',
    'opener',
    'Option',
    'OrientationSensor',
    'origin',
    'OscillatorNode',
    'outerHeight',
    'outerWidth',
    'OverconstrainedError',
    'PageTransitionEvent',
    'pageXOffset',
    'pageYOffset',
    'PannerNode',
    'parent',
    'parseFloat',
    'parseInt',
    'PasswordCredential',
    'Path2D',
    'PaymentAddress',
    'PaymentRequest',
    'PaymentRequestUpdateEvent',
    'PaymentResponse',
    'performance',
    'Performance',
    'PerformanceEntry',
    'PerformanceLongTaskTiming',
    'PerformanceMark',
    'PerformanceMeasure',
    'PerformanceNavigation',
    'PerformanceNavigationTiming',
    'PerformanceObserver',
    'PerformanceObserverEntryList',
    'PerformancePaintTiming',
    'PerformanceResourceTiming',
    'PerformanceServerTiming',
    'PerformanceTiming',
    'PeriodicWave',
    'Permissions',
    'PermissionStatus',
    'PERSISTENT',
    'personalbar',
    'PhotoCapabilities',
    'Plugin',
    'PluginArray',
    'PointerEvent',
    'PopStateEvent',
    'postMessage',
    'Presentation',
    'PresentationAvailability',
    'PresentationConnection',
    'PresentationConnectionAvailableEvent',
    'PresentationConnectionCloseEvent',
    'PresentationConnectionList',
    'PresentationReceiver',
    'PresentationRequest',
    'print',
    'ProcessingInstruction',
    'ProgressEvent',
    'Promise',
    'PromiseRejectionEvent',
    'prompt',
    'Proxy',
    'PublicKeyCredential',
    'PushManager',
    'PushSubscription',
    'PushSubscriptionOptions',
    'RadioNodeList',
    'Range',
    'RangeError',
    'ReadableStream',
    'ReferenceError',
    'Reflect',
    'RegExp',
    'RelativeOrientationSensor',
    'releaseEvents',
    'RemotePlayback',
    'Request',
    'requestAnimationFrame',
    'requestIdleCallback',
    'resizeBy',
    'ResizeObserver',
    'ResizeObserverEntry',
    'resizeTo',
    'Response',
    'RTCCertificate',
    'RTCDataChannel',
    'RTCDataChannelEvent',
    'RTCDTMFSender',
    'RTCDTMFToneChangeEvent',
    'RTCIceCandidate',
    'RTCPeerConnection',
    'RTCPeerConnectionIceEvent',
    'RTCRtpContributingSource',
    'RTCRtpReceiver',
    'RTCRtpSender',
    'RTCSessionDescription',
    'RTCStatsReport',
    'RTCTrackEvent',
    'screen',
    'Screen',
    'screenLeft',
    'ScreenOrientation',
    'screenTop',
    'screenX',
    'screenY',
    'ScriptProcessorNode',
    'scroll',
    'scrollbars',
    'scrollBy',
    'scrollTo',
    'scrollX',
    'scrollY',
    'SecurityPolicyViolationEvent',
    'Selection',
    'self',
    'Sensor',
    'SensorErrorEvent',
    'ServiceWorker',
    'ServiceWorkerContainer',
    'ServiceWorkerRegistration',
    'sessionStorage',
    'Set',
    'setInterval',
    'setTimeout',
    'ShadowRoot',
    'SharedArrayBuffer',
    'SharedWorker',
    'SourceBuffer',
    'SourceBufferList',
    'speechSynthesis',
    'SpeechSynthesisEvent',
    'SpeechSynthesisUtterance',
    'StaticRange',
    'status',
    'statusbar',
    'StereoPannerNode',
    'stop',
    'Storage',
    'StorageEvent',
    'StorageManager',
    'String',
    'styleMedia',
    'StylePropertyMap',
    'StylePropertyMapReadOnly',
    'StyleSheet',
    'StyleSheetList',
    'SubtleCrypto',
    'SVGAElement',
    'SVGAngle',
    'SVGAnimatedAngle',
    'SVGAnimatedBoolean',
    'SVGAnimatedEnumeration',
    'SVGAnimatedInteger',
    'SVGAnimatedLength',
    'SVGAnimatedLengthList',
    'SVGAnimatedNumber',
    'SVGAnimatedNumberList',
    'SVGAnimatedPreserveAspectRatio',
    'SVGAnimatedRect',
    'SVGAnimatedString',
    'SVGAnimatedTransformList',
    'SVGAnimateElement',
    'SVGAnimateMotionElement',
    'SVGAnimateTransformElement',
    'SVGAnimationElement',
    'SVGCircleElement',
    'SVGClipPathElement',
    'SVGComponentTransferFunctionElement',
    'SVGDefsElement',
    'SVGDescElement',
    'SVGDiscardElement',
    'SVGElement',
    'SVGEllipseElement',
    'SVGFEBlendElement',
    'SVGFEColorMatrixElement',
    'SVGFEComponentTransferElement',
    'SVGFECompositeElement',
    'SVGFEConvolveMatrixElement',
    'SVGFEDiffuseLightingElement',
    'SVGFEDisplacementMapElement',
    'SVGFEDistantLightElement',
    'SVGFEDropShadowElement',
    'SVGFEFloodElement',
    'SVGFEFuncAElement',
    'SVGFEFuncBElement',
    'SVGFEFuncGElement',
    'SVGFEFuncRElement',
    'SVGFEGaussianBlurElement',
    'SVGFEImageElement',
    'SVGFEMergeElement',
    'SVGFEMergeNodeElement',
    'SVGFEMorphologyElement',
    'SVGFEOffsetElement',
    'SVGFEPointLightElement',
    'SVGFESpecularLightingElement',
    'SVGFESpotLightElement',
    'SVGFETileElement',
    'SVGFETurbulenceElement',
    'SVGFilterElement',
    'SVGForeignObjectElement',
    'SVGGElement',
    'SVGGeometryElement',
    'SVGGradientElement',
    'SVGGraphicsElement',
    'SVGImageElement',
    'SVGLength',
    'SVGLengthList',
    'SVGLinearGradientElement',
    'SVGLineElement',
    'SVGMarkerElement',
    'SVGMaskElement',
    'SVGMatrix',
    'SVGMetadataElement',
    'SVGMPathElement',
    'SVGNumber',
    'SVGNumberList',
    'SVGPathElement',
    'SVGPatternElement',
    'SVGPoint',
    'SVGPointList',
    'SVGPolygonElement',
    'SVGPolylineElement',
    'SVGPreserveAspectRatio',
    'SVGRadialGradientElement',
    'SVGRect',
    'SVGRectElement',
    'SVGScriptElement',
    'SVGSetElement',
    'SVGStopElement',
    'SVGStringList',
    'SVGStyleElement',
    'SVGSVGElement',
    'SVGSwitchElement',
    'SVGSymbolElement',
    'SVGTextContentElement',
    'SVGTextElement',
    'SVGTextPathElement',
    'SVGTextPositioningElement',
    'SVGTitleElement',
    'SVGTransform',
    'SVGTransformList',
    'SVGTSpanElement',
    'SVGUnitTypes',
    'SVGUseElement',
    'SVGViewElement',
    'Symbol',
    'Symbol(Symbol.toStringTag)',
    'SyncManager',
    'SyntaxError',
    'TaskAttributionTiming',
    'TEMPORARY',
    'Text',
    'TextDecoder',
    'TextEncoder',
    'TextEvent',
    'TextMetrics',
    'TextTrack',
    'TextTrackCue',
    'TextTrackCueList',
    'TextTrackList',
    'TimeRanges',
    'toolbar',
    'top',
    'Touch',
    'TouchEvent',
    'TouchList',
    'TrackEvent',
    'TransformStream',
    'TransitionEvent',
    'TreeWalker',
    'TypeError',
    'UIEvent',
    'Uint16Array',
    'Uint32Array',
    'Uint8Array',
    'Uint8ClampedArray',
    'undefined',
    'unescape',
    'URIError',
    'URL',
    'URLSearchParams',
    'USB',
    'USBAlternateInterface',
    'USBConfiguration',
    'USBConnectionEvent',
    'USBDevice',
    'USBEndpoint',
    'USBInterface',
    'USBInTransferResult',
    'USBIsochronousInTransferPacket',
    'USBIsochronousInTransferResult',
    'USBIsochronousOutTransferPacket',
    'USBIsochronousOutTransferResult',
    'USBOutTransferResult',
    'ValidityState',
    'visualViewport',
    'VisualViewport',
    'VTTCue',
    'WaveShaperNode',
    'WeakMap',
    'WeakSet',
    'WebAssembly',
    'WebGL2RenderingContext',
    'WebGLActiveInfo',
    'WebGLBuffer',
    'WebGLContextEvent',
    'WebGLFramebuffer',
    'WebGLProgram',
    'WebGLQuery',
    'WebGLRenderbuffer',
    'WebGLRenderingContext',
    'WebGLSampler',
    'WebGLShader',
    'WebGLShaderPrecisionFormat',
    'WebGLSync',
    'WebGLTexture',
    'WebGLTransformFeedback',
    'WebGLUniformLocation',
    'WebGLVertexArrayObject',
    'WebKitAnimationEvent',
    'webkitCancelAnimationFrame',
    'WebKitCSSMatrix',
    'webkitMediaStream',
    'WebKitMutationObserver',
    'webkitRequestAnimationFrame',
    'webkitRequestFileSystem',
    'webkitResolveLocalFileSystemURL',
    'webkitRTCPeerConnection',
    'webkitSpeechGrammar',
    'webkitSpeechGrammarList',
    'webkitSpeechRecognition',
    'webkitSpeechRecognitionError',
    'webkitSpeechRecognitionEvent',
    'webkitStorageInfo',
    'WebKitTransitionEvent',
    'webkitURL',
    'WebSocket',
    'WheelEvent',
    'window',
    'Window',
    'Worker',
    'Worklet',
    'WritableStream',
    'XMLDocument',
    'XMLHttpRequest',
    'XMLHttpRequestEventTarget',
    'XMLHttpRequestUpload',
    'XMLSerializer',
    'XPathEvaluator',
    'XPathExpression',
    'XPathResult',
    'XSLTProcessor',
]

var allProperties = knownProperties.concat(checkExistenceOnly);

// for (var i = 0; i < knownProperties.length; ++i) {
//     var property = knownProperties[i];
//     if (property in document) {
//         logt(property, document[property]);
//     } else {
//         logt(property, "[not available]");
//     }
// }

var available = '';
for (var i = 0; i < allProperties.length; ++i) {
    var property = allProperties[i];
    if (property in document) {
        available += '1';
    } else {
        available += '0';
    }
}

log(md5(available));


//http://browserhacks.com/

var isChromium = [
    !!window.chrome
]

var isChrome = [
    !!window.chrome && !!window.chrome.webstore,
]

var isWebkit = 'WebkitAppearance' in document.documentElement.style;
var isSafari = [
    /a/.__proto__=='//',
    !!navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && typeof document.body.style.webkitFilter !== "undefined" && !window.chrome,
    /constructor/i.test(window.HTMLElement,
    window.ApplePayError != undefined,
    window.ApplePaySession != undefined,
    window.ApplePaySession != undefined)
]

isSafari = boolArrayToBinary(isSafari)

var isFF = [
    !!window.sidebar,
    'MozAppearance' in document.documentElement.style,
    typeof InstallTrigger !== 'undefined',
    /a/[-1]=='a',
    (function x(){})[-5]=='x',
    !!navigator.userAgent.match(/firefox/i),
    !!window.globalStorage,
    (function x(){})[-6]=='x',
]

function boolArrayToBinary(array) {
    var ret = [];
    for (var i = 0; i < array.length; ++i) {
        ret.push(array[i] ? 1 : 0);
    }
    return ret;
}

isFF = boolArrayToBinary(isFF)


// var isOpera = /^function \(/.test([].sort);
// var isOpera = window.opera && window.opera.version() == X;
// var isOpera = !!window.opera;
// var isOpera = !!window.opera || /opera|opr/i.test(navigator.userAgent);
// var isOperaMini = Object.prototype.toString.call(window.operamini) === '[object OperaMini]';
// var isOperaMini = (navigator.userAgent.indexOf('Opera Mini') > -1);

var isIE = [
    document.all && !window.XMLHttpRequest,
    !!window.ActiveXObject,
    document.all && !document.querySelector,
    document.all && window.XMLHttpRequest,
    !+'\v1',
    document.all && document.querySelector,
    document.all && document.querySelector && !document.addEventListener,
    document.all && document.addEventListener && !window.atob,
    /*@cc_on!@*/false,
    document.body.style.msTouchAction !== undefined,
    'behavior' in document.documentElement.style && '-ms-user-select' in document.documentElement.style,
    document.all && document.compatMode,
    document.all && window.XMLHttpRequest && !document.querySelector,
    navigator.appVersion.indexOf("MSIE 7.") !== -1,
    '\v'=='v',
    document.all && !document.addEventListener,
    document.all && document.addEventListener,
    document.all && !window.atob,
    document.all && window.atob,
    eval("/*@cc_on!@*/false") && document.documentMode === 10,
    window.navigator.msPointerEnabled,
    '-ms-scroll-limit' in document.documentElement.style && '-ms-ime-align' in document.documentElement.style,
]

isIE = boolArrayToBinary(isIE)

logt("isFF", isFF.join(''))
logt("isSafari", isSafari.join(''))
logt("isIE", isIE.join(''))


// var ieVersion1 = (function() { if (new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})").exec(navigator.userAgent) != null) { return parseFloat( RegExp.$1 ); } else { return false; } })();
// var ieVersion2 = /*@cc_on (function() {switch(@_jscript_version) {case 1.0: return 3; case 3.0: return 4; case 5.0: return 5; case 5.1: return 5; case 5.5: return 5.5; case 5.6: return 6; case 5.7: return 7; case 5.8: return 8; case 9: return 9; case 10: return 10;}})() || @*/ 0;
// logt("isChromium", isChromium)
// logt("isWebkit", isWebkit)
// logt("isFF", isFF)
// logt("isIE", isIE)

// log(document.anchors)

// function SomeConstructor() {
//     log("this: " + this);
// }


var available = '';
for (var i = 0; i < knownProperties.length; ++i) {
    var property = knownProperties[i];
    if (property in document && document[property] != null) {
        logt(property, document[property])
    }
}
log(available);


logt("document", document)
logt("document.__proto__", document.__proto__)
logt("document.__proto__.__proto__", document.__proto__.__proto__)
logt("document.__proto__.__proto__.__proto__", document.__proto__.__proto__.__proto__)
logt("document.__proto_.__proto__.__proto__.__proto___", document.__proto__.__proto__.__proto__.__proto__)
logt("document.__proto_.__proto__.__proto__.__proto___.__proto__", document.__proto__.__proto__.__proto__.__proto__.__proto__)
logt("document.children", document.children)
logt("document.head", document.head)

// TODO: Do a test for function to string style

var errors  = [
    ["URIError", typeof URIError == 'undefined' ? null : URIError],
    ["TypeError", typeof TypeError == 'undefined' ? null : TypeError],
    ["SyntaxError", typeof SyntaxError == 'undefined' ? null : SyntaxError],
    ["ReferenceError", typeof ReferenceError == 'undefined' ? null : ReferenceError],
    ["RangeError", typeof RangeError == 'undefined' ? null : RangeError],
    ["DOMError", typeof DOMError == 'undefined' ? null : DOMError],
    ["InternalError", typeof InternalError == 'undefined' ? null : InternalError],
    ["EvalError", typeof EvalError == 'undefined' ? null : EvalError],
    ["MediaError", typeof MediaError == 'undefined' ? null : MediaError],
    ["OverconstrainedError", typeof OverconstrainedError == 'undefined' ? null : OverconstrainedError],
    ["SyntaxError", typeof SyntaxError == 'undefined' ? null : SyntaxError],
]

for (var i = 0; i < errors.length; ++i) {
    var name = errors[i][0];
    var clazz = errors[i][1];
    if (clazz == null) {
        logt(name, 'undefined');
    } else {
        logt(name, new URIError("Loren Ipsum"));
    }
}

for (var prop in window) {
    log(prop);
}

log(window.__proto__)
log(window.__proto__.__proto__)
log(window.__proto__.__proto__.__proto__)
log(window.__proto__.__proto__.__proto__.__proto__)

if (window.TEMPORARY != null) {
    log(window.TEMPORARY)
    log(window.TEMPORARY.__proto__)
}


// Language features
log(Promise)
var p = new Promise(function() {

});
log(p.finally)

log(navigator.userAgent)
